
use std::fmt;
use crate::package::{Class, EPkg, Function, Method, Pkg, Value};
use crate::FromTokens;
use std::io::Write;
use std::io;

const MKDOCS_COMMENT_HEADER: &'static [u8; 166] = br#"<!---
	This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
	More information: https://github.com/MWSE/MWSE/tree/master/docs
-->
"#;

const LUA_COMMENT_HEADER: &'static [u8; 164] = br#"--[[
	This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
	More information: https://github.com/MWSE/MWSE/tree/master/docs
]]
"#;


pub trait Writable<P = !> where Pkg<P>: Writable {
	/// Write the mkdocs documentation
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&Pkg<P>>) -> io::Result<()>;
	// / Write the Emmy documentation
	// fn write_lua(&self, w: &mut impl Write, parent: Option<&Pkg<PkgTy>>) -> io::Result<()> {
	// 	todo!("Figure out the lua thing")
	// }

}
impl Writable<!> for Pkg<!>{
	fn write_mkdocs(&self, _w: &mut impl Write, _parent: Option<&Pkg<!>>) -> io::Result<()> {
		unreachable!("Something must have gone seriously wrong to get here.")
	}
}

impl<P> Pkg<P> where Pkg<P>: Writable {
	fn write_sep<C>(&self, items: &[Pkg<C>], w: &mut impl Write) -> io::Result<()> 
	where Pkg<C>: Writable<P>
	{
		let parent = Some(self);
		if let Some(val) = items.first() {
			val.write_mkdocs(w, parent)?;
			for val in &items[1..] {
				w.write(b"***\n")?;
				val.write_mkdocs(w, parent)?;
			}
		}
		Ok(())
	}
}




impl Writable for Pkg<Class> {
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&Pkg<!>>) -> io::Result<()> {
		w.write(MKDOCS_COMMENT_HEADER)?;
		let name = self.name.as_ref();
		let name_lower = name.to_lowercase();
		let desc = match &self.description {
			Some(d) => d.as_ref(),
			None => ""
		};
		writeln!(w, "{name}")?;
		writeln!(w, r#"<div class="search_terms" style="display: none">{name_lower}</div>"#)?;
		writeln!(w, "\n{desc}\n")?;

		writeln!(w, "## Properties")?;
		self.write_sep(self.ty.values.as_slice(), w)?;
		writeln!(w, "## Functions")?;
		self.write_sep(self.ty.functions.as_slice(), w)?;
		writeln!(w, "## Methods")?;
		self.write_sep(self.ty.methods.as_slice(), w)?;

		Ok(())
	}
}


impl<P> Writable<P> for Pkg<Value> where Pkg<P>: Writable {
	fn write_mkdocs(&self, w: &mut impl Write, _: Option<&Pkg<P>>) -> io::Result<()> {
		let name = self.name.as_ref();
		let name_lower = name.to_lowercase();
		let desc = match self.description.as_ref() {
			Some(s) => s.as_ref(),
			None => ""
		};
		let ty = match self.ty.ty.as_ref() {
			Some(ty) => ty.as_ref(),
			None => "any"
		};

		write!(w, 
r#"
### `{name}`
<div class="search_terms" style="display: none">{name_lower}</div>

{desc}

**Returns**:

* `result` ({ty})

"#
		)?;
		Ok(())
	}

}


impl<P> Writable<P> for Pkg<Function> where Pkg<P>: Writable {
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&Pkg<P>>) -> io::Result<()> {
		let name = self.name.as_ref();
		let name_lower = name.to_lowercase();
		let desc = match self.description.as_ref() {
			Some(s) => s.as_ref(),
			None => ""
		};
		let Some(parent) = parent else {panic!("Error: Parent must be provided!")};
		let parent_name = parent.name.as_str();

		let arg_names: String = self.ty.args.iter()
			.map(|a| a.name.as_ref().unwrap().as_ref())
			.collect::<Vec<_>>()
			.join(", ");

		write!(w, 
r#"
### `{name}`
<div class="search_terms" style="display: none">{name_lower}</div>

{desc}

```lua
{parent_name}.{name}({arg_names})
```

"#
		)?;
		Ok(())
	}

}

impl<P> Writable<P> for Pkg<Method> where Pkg<P>: Writable {
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&Pkg<P>>) -> io::Result<()> {
		let name = self.name.as_ref();
		let name_lower = name.to_lowercase();
		let desc = match self.description.as_ref() {
			Some(s) => s.as_ref(),
			None => ""
		};
		let Some(parent) = parent else {panic!("Error: Parent must be provided!")};
		let parent_name = parent.name.as_ref();
		let arg_names: String = self.ty.args.iter()
			.map(|a| a.name.as_ref().unwrap().as_ref())
			.collect::<Vec<_>>()
			.join(", ");

		write!(w, 
r#"
### `{name}`
<div class="search_terms" style="display: none">{name_lower}</div>

{desc}

```lua
{parent_name}:{name}({arg_names})
```

"#
		)?;
		Ok(())
	}

}