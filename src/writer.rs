
use std::fmt;
use crate::package::{ClassPkg, EPkg, FnPkg, MethodPkg, ValuePkg};
use std::io::Write;
use std::io;

const MKDOCS_COMMENT_HEADER: &'static [u8; 166] = br#"<!---
	This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
	More information: https://github.com/MWSE/MWSE/tree/master/docs
-->
"#;

const LUA_COMMENT_HEADER: &'static [u8; 164] = br#"--[[
	This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
	More information: https://github.com/MWSE/MWSE/tree/master/docs
]]
"#;


pub trait Writable {
	/// Write the mkdocs documentation
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&impl Writable>) -> io::Result<()>;
	/// Write the Emmy documentation
	fn write_lua(&self, w: &mut impl Write, parent: Option<&impl Writable>) -> io::Result<()> {
		todo!("Figure out the lua thing")
	}

}


fn write_sep(parent: Option<&impl Writable>, items: &[impl Writable], w: &mut impl Write) -> io::Result<()> {
	if let Some(val) = items.first() {
		val.write_mkdocs(w, parent)?;
		for val in &items[1..] {
			w.write(b"***\n")?;
			val.write_mkdocs(w, parent)?;
		}
	}
	Ok(())
}



impl Writable for ClassPkg {
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&impl Writable>) -> io::Result<()> {
		w.write(MKDOCS_COMMENT_HEADER)?;
		let name = self.core.name.as_ref();
		let name_lower = name.to_lowercase();
		let desc = match &self.core.description {
			Some(d) => d.as_ref(),
			None => ""
		};
		writeln!(w, "{name}")?;
		writeln!(w, r#"<div class="search_terms" style="display: none">{name_lower}</div>"#)?;
		writeln!(w, "\n{desc}\n")?;

		writeln!(w, "## Properties")?;
		write_sep(Some(self), self.values.as_slice(), w);
		writeln!(w, "## Functions")?;
		write_sep(Some(self), self.functions.as_slice(), w);
		writeln!(w, "## Methods")?;
		write_sep(Some(self), self.methods.as_slice(), w);

		Ok(())
	}
}


impl Writable for ValuePkg {
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&impl Writable>) -> io::Result<()> {
		let name = self.core.name.as_ref();
		let name_lower = name.to_lowercase();
		let desc = match self.core.description.as_ref() {
			Some(s) => s.as_ref(),
			None => ""
		};
		let ty = match self.ty.as_ref() {
			Some(ty) => ty.as_ref(),
			None => "any"
		};

		write!(w, 
r#"
### `{name}`
<div class="search_terms" style="display: none">{name_lower}</div>

{desc}

**Returns**:

* `result` ({ty})

"#
		)?;
		Ok(())
	}

}


impl Writable for FnPkg {
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&impl Writable>) -> io::Result<()> {
		let name = self.core.name.as_ref();
		let name_lower = name.to_lowercase();
		let desc = match self.core.description.as_ref() {
			Some(s) => s.as_ref(),
			None => ""
		};
		let parent = match &self.core.parent {
			Some(p) => p.as_ref(),
			_ => todo!("Is this even possible?"),
		};

		let arg_names: String = self.args.iter()
			.map(|a| a.name.as_ref().unwrap().as_ref())
			.collect::<Vec<_>>()
			.join(", ");

		write!(w, 
r#"
### `{name}`
<div class="search_terms" style="display: none">{name_lower}</div>

{desc}

```lua
{parent}.{name}({arg_names})
```

"#
		)?;
		Ok(())
	}

}

impl Writable for MethodPkg {
	fn write_mkdocs(&self, w: &mut impl Write, parent: Option<&impl Writable>) -> io::Result<()> {
		let name = self.core.name.as_ref();
		let name_lower = name.to_lowercase();
		let desc = match self.core.description.as_ref() {
			Some(s) => s.as_ref(),
			None => ""
		};
		let parent = match &self.core.parent {
			Some(p) => p.as_ref(),
			_ => todo!("Is this even possible?"),
		};

		let arg_names: String = self.args.iter()
			.map(|a| a.name.as_ref().unwrap().as_ref())
			.collect::<Vec<_>>()
			.join(", ");

		write!(w, 
r#"
### `{name}`
<div class="search_terms" style="display: none">{name_lower}</div>

{desc}

```lua
{parent}:{name}({arg_names})
```

"#
		)?;
		Ok(())
	}

}